{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thyara\\\\Documents\\\\GitHub\\\\MiniCore-ThyaraVintimilla\\\\frontend\\\\src\\\\screens\\\\progresoScreen.jsx\",\n  _s = $RefreshSig$();\n// ProgresoScreen.jsx\nimport React from 'react';\nimport { useGetWeightedProgressQuery } from '../slices/progresoApiSlice.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgresoScreen = () => {\n  _s();\n  // Llamar al hook para obtener los datos calculados\n  const {\n    data: weightedProgressData,\n    isLoading,\n    isError,\n    error\n  } = useGetWeightedProgressQuery();\n\n  // Manejar los estados de carga y error\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 25\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 23\n  }, this);\n\n  // Renderizar los datos calculados\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Progreso Ponderado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), weightedProgressData && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: weightedProgressData.map(userProgress => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"User ID: \", userProgress.user]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this), Object.entries(userProgress.weightedGrades).map(([progressName, grade]) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [progressName, \": \", grade.toFixed(2)]\n        }, progressName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this))]\n      }, userProgress.user, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgresoScreen, \"QR5+TWI1ddG+jkHKeddg0egg9sg=\", false, function () {\n  return [useGetWeightedProgressQuery];\n});\n_c = ProgresoScreen;\nexport default ProgresoScreen;\n\n/*import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { useGetGradesQuery } from '../slices/gradesApiSlice.js';\r\nimport { useGetProgresosQuery } from '../slices/progresoApiSlice.js';\r\nimport '../assets/styles/index.css'; // Asegúrate de que la ruta sea correcta\r\n\r\nconst ProgresoScreen = () => {\r\n  const { data: grades, isLoading, error } = useGetGradesQuery();\r\n  \r\n  //const { data: progresos, isLoading, error } = useGetProgresosQuery();\r\n\r\n  if (isLoading) return <h2>Loading...</h2>;\r\n  if (error) return <div>{error?.data?.message || error.error}</div>;\r\n\r\n  return (\r\n    <>\r\n        <h1>User Progress</h1>\r\n        <Row>\r\n            <Col xs={12}>\r\n                <table className=\"customTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>User Name</th>\r\n                            <th>Progreso 1</th>\r\n                            <th>Progreso 2</th>\r\n                            <th>Progreso 3</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {userProgress.map((progress, index) => (\r\n                            <tr key={index}>\r\n                                <td>{progress.name}</td>\r\n                                <td>{progress['Progreso 1']}</td>\r\n                                <td>{progress['Progreso 2']}</td>\r\n                                <td>{progress['Progreso 3']}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </Col>\r\n        </Row>\r\n    </>\r\n);\r\n};\r\n\r\nexport default ProgresoScreen;*/\nvar _c;\n$RefreshReg$(_c, \"ProgresoScreen\");","map":{"version":3,"names":["React","useGetWeightedProgressQuery","jsxDEV","_jsxDEV","ProgresoScreen","_s","data","weightedProgressData","isLoading","isError","error","children","fileName","_jsxFileName","lineNumber","columnNumber","message","map","userProgress","user","Object","entries","weightedGrades","progressName","grade","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Thyara/Documents/GitHub/MiniCore-ThyaraVintimilla/frontend/src/screens/progresoScreen.jsx"],"sourcesContent":["// ProgresoScreen.jsx\r\nimport React from 'react';\r\nimport {useGetWeightedProgressQuery} from '../slices/progresoApiSlice.js';\r\n\r\nconst ProgresoScreen = () => {\r\n  // Llamar al hook para obtener los datos calculados\r\n  const {\r\n    data: weightedProgressData,\r\n    isLoading,\r\n    isError,\r\n    error\r\n  } = useGetWeightedProgressQuery();\r\n\r\n  // Manejar los estados de carga y error\r\n  if (isLoading) return <div>Loading...</div>;\r\n  if (isError) return <div>Error: {error.message}</div>;\r\n\r\n  // Renderizar los datos calculados\r\n  return (\r\n    <div>\r\n      <h1>Progreso Ponderado</h1>\r\n      {weightedProgressData && (\r\n        <ul>\r\n          {weightedProgressData.map((userProgress) => (\r\n            <li key={userProgress.user}>\r\n              <h2>User ID: {userProgress.user}</h2>\r\n              {Object.entries(userProgress.weightedGrades).map(([progressName, grade]) => (\r\n                <p key={progressName}>{progressName}: {grade.toFixed(2)}</p>\r\n              ))}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgresoScreen;\r\n\r\n/*import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { useGetGradesQuery } from '../slices/gradesApiSlice.js';\r\nimport { useGetProgresosQuery } from '../slices/progresoApiSlice.js';\r\nimport '../assets/styles/index.css'; // Asegúrate de que la ruta sea correcta\r\n\r\nconst ProgresoScreen = () => {\r\n  const { data: grades, isLoading, error } = useGetGradesQuery();\r\n  \r\n  //const { data: progresos, isLoading, error } = useGetProgresosQuery();\r\n\r\n  if (isLoading) return <h2>Loading...</h2>;\r\n  if (error) return <div>{error?.data?.message || error.error}</div>;\r\n\r\n  return (\r\n    <>\r\n        <h1>User Progress</h1>\r\n        <Row>\r\n            <Col xs={12}>\r\n                <table className=\"customTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>User Name</th>\r\n                            <th>Progreso 1</th>\r\n                            <th>Progreso 2</th>\r\n                            <th>Progreso 3</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {userProgress.map((progress, index) => (\r\n                            <tr key={index}>\r\n                                <td>{progress.name}</td>\r\n                                <td>{progress['Progreso 1']}</td>\r\n                                <td>{progress['Progreso 2']}</td>\r\n                                <td>{progress['Progreso 3']}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </Col>\r\n        </Row>\r\n    </>\r\n);\r\n};\r\n\r\nexport default ProgresoScreen;*/\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,2BAA2B,QAAO,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B;EACA,MAAM;IACJC,IAAI,EAAEC,oBAAoB;IAC1BC,SAAS;IACTC,OAAO;IACPC;EACF,CAAC,GAAGT,2BAA2B,CAAC,CAAC;;EAEjC;EACA,IAAIO,SAAS,EAAE,oBAAOL,OAAA;IAAAQ,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAC3C,IAAIN,OAAO,EAAE,oBAAON,OAAA;IAAAQ,QAAA,GAAK,SAAO,EAACD,KAAK,CAACM,OAAO;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;;EAErD;EACA,oBACEZ,OAAA;IAAAQ,QAAA,gBACER,OAAA;MAAAQ,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1BR,oBAAoB,iBACnBJ,OAAA;MAAAQ,QAAA,EACGJ,oBAAoB,CAACU,GAAG,CAAEC,YAAY,iBACrCf,OAAA;QAAAQ,QAAA,gBACER,OAAA;UAAAQ,QAAA,GAAI,WAAS,EAACO,YAAY,CAACC,IAAI;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACpCK,MAAM,CAACC,OAAO,CAACH,YAAY,CAACI,cAAc,CAAC,CAACL,GAAG,CAAC,CAAC,CAACM,YAAY,EAAEC,KAAK,CAAC,kBACrErB,OAAA;UAAAQ,QAAA,GAAuBY,YAAY,EAAC,IAAE,EAACC,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;QAAA,GAA/CF,YAAY;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAuC,CAC5D,CAAC;MAAA,GAJKG,YAAY,CAACC,IAAI;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKtB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACV,EAAA,CA/BID,cAAc;EAAA,QAOdH,2BAA2B;AAAA;AAAAyB,EAAA,GAP3BtB,cAAc;AAiCpB,eAAeA,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}