{"ast":null,"code":"import React from'react';import{useState,useEffect}from'react';import{useGetWeightedProgressQuery}from'../slices/progresoApiSlice.js';// Esta función consolidará los datos de progreso en un solo objeto por usuario\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const consolidateProgressData=progressData=>{const passingScore=6;// Definir la nota de aprobación\nconst usersProgress={};progressData.forEach(item=>{const{name}=item;if(!usersProgress[name]){usersProgress[name]={name,'Progreso 1':'N/A','Progreso 2':'N/A','Progreso 3':'N/A','Needed for Passing':'N/A'};}Object.keys(item).forEach(key=>{if(key.includes('Progreso')){const progresoNum=key.split(' ')[2];usersProgress[name][\"Progreso \".concat(progresoNum)]=parseFloat(item[key]).toFixed(2);}});// Si Progreso 3 es 'N/A', calcular lo necesario para aprobar\nif(usersProgress[name]['Progreso 3']==='N/A'){const progreso1=parseFloat(usersProgress[name]['Progreso 1'])||0;const progreso2=parseFloat(usersProgress[name]['Progreso 2'])||0;const neededForPassing=passingScore-(progreso1+progreso2);// Si el resultado es mayor que 0, se muestra. Si no, se muestra 'Extra effort needed' o un mensaje similar.\nusersProgress[name]['Needed for Passing']=neededForPassing>0?neededForPassing.toFixed(2):'Extra effort needed';}});return Object.values(usersProgress);};// Función para determinar la clase basada en el progreso y la nota necesaria\nconst getProgressClassName=(progreso,neededForPassing)=>{if(progreso==='N/A')return'progreso-red';const progressValue=parseFloat(progreso);const neededValue=parseFloat(neededForPassing);if(progressValue>neededValue)return'progreso-green';if(progressValue===neededValue)return'progreso-yellow';return'progreso-red';// Caso en que la nota de progreso sea menor que la necesaria para aprobar\n};const ProgresoScreen=()=>{const{data:userProgress,isLoading,isError,error}=useGetWeightedProgressQuery();const[filter,setFilter]=useState('');const[filteredData,setFilteredData]=useState([]);// Consolidar los datos de progreso antes de renderizarlos\nconst consolidatedData=isLoading||isError?[]:consolidateProgressData(userProgress);const handleFilter=()=>{if(userProgress&&!isLoading&&!isError){const consolidated=consolidateProgressData(userProgress);const filtered=consolidated.filter(user=>user.name.toLowerCase().includes(filter.toLowerCase()));setFilteredData(filtered);}};// Esta función se ejecuta cuando el componente se monta y cada vez que userProgress cambia\nReact.useEffect(()=>{if(userProgress&&!isLoading&&!isError){setFilteredData(consolidateProgressData(userProgress));}},[userProgress,isLoading,isError]);if(isLoading)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});if(isError)return/*#__PURE__*/_jsxs(\"div\",{children:[\"Error: \",error.toString()]});// Renderizado de la tabla con datos de progreso consolidados\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Weighted Progress\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search user...\",value:filter,onChange:e=>setFilter(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:handleFilter,children:\"Filtrar\"})]}),/*#__PURE__*/_jsxs(\"table\",{className:\"customTable\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Usuario\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Progreso 1\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Progreso 2\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Progreso 3\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Necesita para pasar el progreso 3\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:filteredData.map((user,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:user.name}),/*#__PURE__*/_jsx(\"td\",{children:user['Progreso 1']}),/*#__PURE__*/_jsx(\"td\",{children:user['Progreso 2']}),/*#__PURE__*/_jsx(\"td\",{className:\"\".concat(getProgressClassName(user['Progreso 3'],user['Needed for Passing']),\" bold-text\"),children:user['Progreso 3']}),/*#__PURE__*/_jsx(\"td\",{children:user['Needed for Passing']})]},index))})]})]});};export default ProgresoScreen;","map":{"version":3,"names":["React","useState","useEffect","useGetWeightedProgressQuery","jsx","_jsx","jsxs","_jsxs","consolidateProgressData","progressData","passingScore","usersProgress","forEach","item","name","Object","keys","key","includes","progresoNum","split","concat","parseFloat","toFixed","progreso1","progreso2","neededForPassing","values","getProgressClassName","progreso","progressValue","neededValue","ProgresoScreen","data","userProgress","isLoading","isError","error","filter","setFilter","filteredData","setFilteredData","consolidatedData","handleFilter","consolidated","filtered","user","toLowerCase","children","toString","type","placeholder","value","onChange","e","target","onClick","className","map","index"],"sources":["C:/Users/Thyara/Documents/GitHub/MiniCore-ThyaraV/frontend/src/screens/progresoScreen.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useGetWeightedProgressQuery } from '../slices/progresoApiSlice.js';\r\n\r\n// Esta función consolidará los datos de progreso en un solo objeto por usuario\r\nconst consolidateProgressData = (progressData) => {\r\n  const passingScore = 6; // Definir la nota de aprobación\r\n  const usersProgress = {};\r\n\r\n  progressData.forEach(item => {\r\n    const { name } = item;\r\n    if (!usersProgress[name]) {\r\n      usersProgress[name] = { name, 'Progreso 1': 'N/A', 'Progreso 2': 'N/A', 'Progreso 3': 'N/A', 'Needed for Passing': 'N/A' };\r\n    }\r\n\r\n    Object.keys(item).forEach(key => {\r\n      if (key.includes('Progreso')) {\r\n        const progresoNum = key.split(' ')[2];\r\n        usersProgress[name][`Progreso ${progresoNum}`] = parseFloat(item[key]).toFixed(2);\r\n      }\r\n    });\r\n\r\n    // Si Progreso 3 es 'N/A', calcular lo necesario para aprobar\r\n    if (usersProgress[name]['Progreso 3'] === 'N/A') {\r\n      const progreso1 = parseFloat(usersProgress[name]['Progreso 1']) || 0;\r\n      const progreso2 = parseFloat(usersProgress[name]['Progreso 2']) || 0;\r\n      const neededForPassing = passingScore - (progreso1 + progreso2);\r\n\r\n      // Si el resultado es mayor que 0, se muestra. Si no, se muestra 'Extra effort needed' o un mensaje similar.\r\n      usersProgress[name]['Needed for Passing'] = neededForPassing > 0 ? neededForPassing.toFixed(2) : 'Extra effort needed';\r\n    }\r\n  });\r\n\r\n  return Object.values(usersProgress);\r\n};\r\n\r\n// Función para determinar la clase basada en el progreso y la nota necesaria\r\nconst getProgressClassName = (progreso, neededForPassing) => {\r\n  if (progreso === 'N/A') return 'progreso-red';\r\n  const progressValue = parseFloat(progreso);\r\n  const neededValue = parseFloat(neededForPassing);\r\n\r\n  if (progressValue > neededValue) return 'progreso-green';\r\n  if (progressValue === neededValue) return 'progreso-yellow';\r\n  return 'progreso-red'; // Caso en que la nota de progreso sea menor que la necesaria para aprobar\r\n};\r\n\r\nconst ProgresoScreen = () => {\r\n  const {\r\n    data: userProgress,\r\n    isLoading,\r\n    isError,\r\n    error\r\n  } = useGetWeightedProgressQuery();\r\n  const [filter, setFilter] = useState('');\r\n  const [filteredData, setFilteredData] = useState([]);\r\n\r\n  // Consolidar los datos de progreso antes de renderizarlos\r\n  const consolidatedData = isLoading || isError ? [] : consolidateProgressData(userProgress);\r\n  \r\n  const handleFilter = () => {\r\n    if (userProgress && !isLoading && !isError) {\r\n      const consolidated = consolidateProgressData(userProgress);\r\n      const filtered = consolidated.filter(user => user.name.toLowerCase().includes(filter.toLowerCase()));\r\n      setFilteredData(filtered);\r\n    }\r\n  };\r\n\r\n  // Esta función se ejecuta cuando el componente se monta y cada vez que userProgress cambia\r\n  React.useEffect(() => {\r\n    if (userProgress && !isLoading && !isError) {\r\n      setFilteredData(consolidateProgressData(userProgress));\r\n    }\r\n  }, [userProgress, isLoading, isError]);\r\n\r\n  if (isLoading) return <div>Loading...</div>;\r\n  if (isError) return <div>Error: {error.toString()}</div>;\r\n\r\n  // Renderizado de la tabla con datos de progreso consolidados\r\n  return (\r\n    <div>\r\n      <h1>Weighted Progress</h1>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search user...\"\r\n          value={filter}\r\n          onChange={(e) => setFilter(e.target.value)}\r\n        />\r\n        <button onClick={handleFilter}>Filtrar</button>\r\n      </div>\r\n      <table className=\"customTable\">\r\n        <thead>\r\n          <tr>\r\n            <th>Usuario</th>\r\n            <th>Progreso 1</th>\r\n            <th>Progreso 2</th>\r\n            <th>Progreso 3</th>\r\n            <th>Necesita para pasar el progreso 3</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filteredData.map((user, index) => (\r\n            <tr key={index}>\r\n              <td>{user.name}</td>\r\n              <td>{user['Progreso 1']}</td>\r\n              <td>{user['Progreso 2']}</td>\r\n              <td className={`${getProgressClassName(user['Progreso 3'], user['Needed for Passing'])} bold-text`}>\r\n                {user['Progreso 3']}\r\n              </td>\r\n              <td>{user['Needed for Passing']}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgresoScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}